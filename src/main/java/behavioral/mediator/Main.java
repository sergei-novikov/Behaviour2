package behavioral.mediator;
/**
 * Паттерн Mediator (Посредник)
 *
 * Шаблон проектирования, обеспечивающий взаимодействие множества объектов, формируя при этом слабую связанность и
 * избавляя объекты от необходимости явно ссылаться друг на друга.
 *
 * Пример
 * - обеспечить взаимодействие множества объектов, сформировав при этом слабую связанность и избавив объекты от
 * необходимости явно ссылаться друг на друга.
 * - Mediator – "Посредник"
 * - ConcreteMediator – "Конкретный посредник"
 * - Классы Colleague – "Коллеги"
 */
public class Main {
    /*
      "Посредник" определяет интерфейс для обмена информацией с объектами "Коллеги", "Конкретный посредник"
      координирует действия объектов "Коллеги". Каждый класс "Коллеги" знает о своем объекте "Посредник", все
      "Коллеги" обмениваются информацией только с посредником, при его отсутствии им пришлось бы обмениваться
      информацией напрямую. "Коллеги" посылают запросы посреднику и получают запросы от него. "Посредник" реализует
      кооперативное поведение, пересылая каждый запрос одному или нескольким "Коллегам".
    */
    public static void main(String[] args) {
        // "Конкретный посредник" координирует действия объектов "Коллеги"
        ConcreteMediator mediator = new ConcreteMediator();

        // Коллеги
        ConcreteColleague1 colleague1 = new ConcreteColleague1(mediator);
        ConcreteColleague2 ccolleague2 = new ConcreteColleague2(mediator);

        // "Коллеги" обмениваются информацией только с посредником, при его отсутствии им пришлось бы обмениваться
        // информацией напрямую.
        mediator.setColleague1(colleague1);
        mediator.setColleague2(ccolleague2);

        // "Коллеги" посылают запросы посреднику и получают запросы от него
        colleague1.send("How are you?");
        ccolleague2.send("Fine, thanks");
    }
}
